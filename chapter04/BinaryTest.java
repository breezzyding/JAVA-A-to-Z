//演示四种进制

public class BinaryTest {

	//编写一个main方法
	public static void main(String[] args) {
		
		//n1 二进制
		int n1 = 0b1010;
		//n2 十进制
		int n2 = 1010;
		//n3 八进制
		int n3 = 01010;
		//n4 十六进制
		int n4 = 0x10101;
		System.out.println("n1=" + n1);
		System.out.println("n2=" + n2);
		System.out.println("n3=" + n3);
		System.out.println("n4=" + n4);



	}
}


//进制的转换（基本功）

//Group 1
//2 8 16进制 转 10进制
//0b1011 = 1 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3 = 11
//0234 = 4 * 8^0 + 3 * 8^1 + 2 * 8^2 + 0 * 8^3 = 156
//0x23A = 10 * 16^0 + 3 * 16^1 + 2 * 16^2 = 570



//Group 2
//10进制 转 2 8 16进制
//34 = 0B00100010
//131 = 0203
//237 = 0xED



//Group 3
//2 进制 转 8 16进制
//2 ---> 8 每三位一组 不满补零
//0B11010101 => 0B11(3)010(2)101(5) = 0325
//2 ---> 16 每四位一组 不满补零
//0B11010101 => 0B1101(13 -> D)0101(5) = 0xD5



//Group 4
//8 16进制 转 2
//0237 = 000 010 011 111 ---> 0B1001 1111  (一个字节)
//0x23B = 0010 0011 1101 ---> 0B0010 0011 1101



//原码 反码 补码
//1.二进制的最高位是符号位：0表示正数，1表示负数
//	（旋转90°记忆法：0 -> 0  1 -> -）
//2.正数的原码，反码，补码都一样（三码合一）
//3.负数的反码=它的原码符号位不变，其他位取反（0 -> 1  1 -> 0）
//4.负数的补码=它的反码+1，负数的反码-负数的补码-1
//5.0的反码，补码都是0
//6.java没有无符号数，换言之，java中的数都是有符号
//7.在计算机运算的时候，都是以补码的方式来运算的
//8.当我们看运算结果的时候，要看他的原码



//位运算符
//java中有七个位运算符（& | ^ ~ >> << >>>）
//按位与&	： 两位全为1，结果为1，否则为0
//按位或|	： 两位有一个为1，结果为1，否则为0
//按位异或^	： 两位一个为0，一个为1，结果为1，否则0
//按位取反~	： 0 -> 1  1 -> 0
//算术右移>>	： 低位溢出，符号位不变，并使用符号位补溢出的高位		
//算数左移<<	： 符号位不变，低位补0	
//逻辑右移>>>： 也叫无符号右移 低位溢出，高位补0
//
//特别说明：没有<<<符号



//位运算的思考题



//1.请看下面的代码段，回答a,b,c,d,e的结果是多少？
//
//详细过程见BitOperator.java
//
//public static void main(String[] args) {
//		
//		int a = 1>>2;//1向右移2位
//		int b = -1>>2;
//		int c = 1<<2;
//		int d = -1<<2;
//		int e = 3>>>2;//算数右移动
//		//a,b,c,d,e的结果是多少
//		System.out.println("a=" + a);
//		System.out.println("b=" + b);
//		System.out.println("c=" + c);
//		System.out.println("d=" + d);
//		System.out.println("e=" + e);
//}




//2.下列表达式运算的结果是多少？
//
//详细过程见BitOperator.java
//
//~2 = -3
//2 & 3 = 2 
//2 | 3 = 3
//~ -5 = 4 
//13 & 7 = 5
//5 | 4 = 5
//-3 ^ 3 = -2
//
//总结:	1.原码 <---> 反码  	符号位不变
//		2.补码 = 反码 ＋ 1
//		3.取反运算 ^ 		符号位改变
//		4.既定步骤	1)求补码
//					2)位运算
//					3)正数 三码合一 负数 求其原码
//					4)2进制 ---> 10进制
//					


