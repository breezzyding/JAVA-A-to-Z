import java.util.Scanner;

public class Object01 {
	public static void main(String[] args) {
		
		/*
		张老太养了两只猫猫：一只名字叫小白，今年3岁，白色
		还有一只叫小花，今年10岁，花色。请编写一个程序，
		当用户输入小猫的名字时就显示该猫的名字，年龄，颜色。
		如果用户输入的小猫名错误，则显示 张老太没有这只猫猫。
		 */
		
		//单独变量来解决 => 不利于数据管理（一只猫的信息被拆解了）
		//第一只猫的信息
		/*
			String cat1Name = "小白";
			int cat1Age = 3;
			String cat1Color = "白色";

			//第二只猫的信息
			String cat1Name = "小花";
			int cat1Age = 10;
			String cat1Color = "花色";
		*/
		
		//数组 ===> 	(1)数据类型体现不出来
		//			(2)只能通过 下标 获取信息，
		//				造成变量名和内容的对应关系不明确
		//			(3)不便于添加新的属性
		/*
		String[] cat1 = {"小白", "3岁", "白色"};
		String[] cat2 = {"小花", "10岁", "花色"};
		System.out.println("请输入猫猫的名字：");
		Scanner myScanner = new Scanner(System.in);
		String name = myScanner.next();

		if (cat1[0].equals(name)) {
			System.out.println(cat1[0] + " " +cat1[1] + 
				" " + cat1[2]);
		}else if (cat2[0].equals(name)) {
			System.out.println(cat2[0] + " " +cat2[1] + 
				" " + cat2[2]);
		}else {
			System.out.println("张老太没有这只猫猫。");
		}

		 */			
		
		//使用OOP面向对象解决
		//实例化一只猫[创建一只猫(对象)]
		//解读
		//1.new Cat() 创建一只猫
		//2.Cat cat1 = new Cat(); 把创建的猫赋给 cat1
		Cat cat1 = new Cat();
		cat1.name = "小白";
		cat1.age = 3;
		cat1.color = "白色";
		cat1.weight = 10;
		//创建第二只猫
		//cat2 也是一个对象()
		Cat cat2 = new Cat();
		cat2.name = "小花";
		cat2.age = 10;
		cat2.color = "花色";
		cat2.weight = 17;

		//怎么访问对象的属性
		System.out.println("第1只猫信息：" + cat1.name + 
			" " + cat1.age + " " + cat1.color + " " + cat1.weight);

		System.out.println("第2只猫信息：" + cat2.name + 
			" " + cat2.age + " " + cat2.color + " " + cat2.weight);

	}
}


//使用面向对象的方式来解决养猫问题

//定义一个猫类 Cat -> 自定义的数据类型
class Cat {
	//属性
	String name;
	int age;
	String color;
	double weight;

	//行为
}



//现有技术解决的缺点分析
		//1.不利于数据的管理
		//2.效率底下
		//==========> 引出类与对象 ---> 解决新的需求



/*
	类与对象
	类[属性,行为]

	猫类（Cat） 	也是数据类型（自定义）	（对应）猫对象（具体的猫）
	int    		Java提供的数据类型   		100（具体的int）
 */


//对象在内存中存在形式（重要）